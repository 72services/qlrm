{
  "name": "QLRM",
  "tagline": "Query Language Result Mapper",
  "body": "#Why?\r\nIn JPA there is no Constructor Expression for native SQL queries. QLRM fills the gap!\r\n\r\nAnd because the implementation was quite easy there is an implementation for JDBC resultsets as well.\r\n\r\n### But what about JPA 2.1 and the ConstructorResult?\r\nRead more: https://github.com/simasch/qlrm/blob/master/ConstructorResult.md\r\n\r\n### QLRM 1.6.8\r\n- Switched Java version back to 1.7. Sorry for any inconvenience! \r\n\r\n### QLRM 1.6.6\r\n- Fixes from Nicola Mazarese pull request https://github.com/simasch/qlrm/pull/14\r\n\r\n### QLRM 1.6.4\r\n- Contains fixes from Jan Mosigs pull request https://github.com/simasch/qlrm/pull/12\r\n\r\n### QLRM 1.6.3 Bugfix\r\n- https://github.com/simasch/qlrm/issues/9 thanks to Jan Mosig for the fix\r\n\r\n### QLRM 1.6.1 New Features\r\n- Support for multiple constructors\r\n- Definition of schema for code generation\r\n\r\nThanks to Stefan Heimberg https://github.com/StefanHeimberg, Nicola Mazarese https://github.com/nicolaMaza and Jan Mosig https://github.com/JanMosigItemis for their contribution!\r\n\r\n##Maven Dependency\r\nQLRM is available in Maven Central\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>ch.simas.qlrm</groupId>\r\n    <artifactId>qlrm</artifactId>\r\n    <version>1.6.8</version>\r\n</dependency>\r\n```\r\n\r\n##Usage\r\nUsage is quite forward but be aware of:\r\n- The Constructor must have the same number of arguments as the result of the SQL query\r\n- The result types must match the constructor arguments types\r\n\r\n###JPA Native Query\r\n#### List\r\n```java\r\nQuery q = em.createNativeQuery(\"SELECT ID, NAME FROM EMPLOYEE\");\r\nList<EmployeeTO> list = jpaResultMapper.list(q, EmployeeTO.class);\r\n```\r\n#### Unique Result\r\n```java\r\nQuery q = em.createNativeQuery(\"SELECT ID, NAME FROM EMPLOYEE WHERE ID = 1\");\r\nEmployeeTO to = jpaResultMapper.uniqueResult(q, EmployeeTO.class);\r\n```\r\n###JPQL\r\n#### List\r\n```java\r\nQuery q = em.createQuery(\"SELECT e.id, e.name FROM Employee e\");\r\nList<EmployeeTO> list = jpaResultMapper.list(q, EmployeeTO.class);\r\n```\r\n#### Unique Result\r\n```java\r\nQuery q = em.createNativeQuery(\"SELECT e.id, e.name FROM Employee e WHERE e.id = 1\");\r\nEmployeeTO to = jpaResultMapper.uniqueResult(q, EmployeeTO.class);\r\n```\r\n\r\n###JDBC SQL\r\n#### List\r\n```java\r\nstmt.execute(\"SELECT ID, NAME FROM EMPLOYEE\");\r\nList<EmployeeTO> list = jdbcResultMapper.list(stmt.getResultSet(), EmployeeTO.class);\r\n```\r\n#### Unique Result\r\n```java\r\nboolean ok = stmt.execute(\"SELECT ID, NAME FROM EMPLOYEE WHERE ID = 1\");\r\nEmployeeTO to = jdbcResultMapper.uniqueResult(stmt.getResultSet(), EmployeeTO.class);\r\n```\r\n\r\n##References\r\nThe QL Result Mapper is inspired by EclipseLink and Hibernate:\r\n- http://onpersistence.blogspot.ch/2010/07/eclipselink-jpa-native-constructor.html\r\n- http://docs.jboss.org/hibernate/orm/3.3/reference/en/html/querysql.html#d0e13904\r\n\r\n# Class Generator\r\nClassGenerator is a simple utility to generate transfer objects from database tables.\r\n\r\n##Usage\r\nThe first parameter is the path where the source file should be generated to. The second is the package name, third a suffix.\r\nWith the forth parameter you can define if the fields should be public or if the generator must generate getters. \r\nThen a database connection must be passed. And the last parameter is a vargargs where you can passe one or multiple table names.\r\n\r\n```java\r\nclassGenerator.generateFromTables(\"src/test/java/\", \"ch.simas.sqlresultmapper.to\", \"TO\", false, con, \"EMPLOYEE\");\r\n```\r\n\r\n#License\r\nSQL Result Mapper is open source and free software under Apache License, Version 2:\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0.html",
  "google": "UA-39994335-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}